version: 2

settings:
  gas_price: "fast"
  chain: any
  services:
    pfs:
      url: https://pfs-goerli-with-fee.services-dev.raiden.network
    udc:
      enable: true
      token:
        deposit: true

token:
  address: "0x62083c80353Df771426D209eF578619EE68D5C7A"
  balance_min: 1_000_000
  balance_fund: 1_000_000

nodes:
  mode: managed
  count: 3
  raiden_version: local

  default_options:
    gas-price: fast
    environment-type: development
    routing-mode: pfs
    pathfinding-max-paths: 5
    pathfinding-max-fee: 100
    flat-fee:
      - "0x62083c80353Df771426D209eF578619EE68D5C7A"
      - 0
    proportional-fee:
      - "0x62083c80353Df771426D209eF578619EE68D5C7A"
      - 0
    proportional-imbalance-fee:
      - "0x62083c80353Df771426D209eF578619EE68D5C7A"
      - 10_000

## This is the MFEE3 scenario. It creates a network with topology 0 -> 1 -> 2 and checks
## whether a path is returned. It also checks that correct imbalance fees are deducted or added in order
## to keep the channel imbalances within the desired limits.
## For every 10000 TKNs tranferred a fee of 10 TKN is expected.

scenario:
  serial:
    tasks:
      - parallel:
          name: "Open channels"
          tasks:
            - open_channel: {from: 0, to: 1, total_deposit: 100_000}
            - open_channel: {from: 1, to: 2, total_deposit: 100_000}
      - serial:
          name: "Test providing routes"
          tasks:
            - wait_blocks: 2
            # Check that the PFS returns a path from 0 to 3
            - transfer: {from: 0, to: 2, amount: 50_000, expected_http_status: 200}

            ## Check that the path is indeed the expected one
            - assert_pfs_history:
                source: 0
                request_count: 1
                target: 2
                expected_routes:
                  - [0, 1, 2]

            # Test that correct imbalance fees were used
            # Imbalance fee is 1%
            # Fee of fee is 1%
            # Safety margin is 5%
            - assert: {from: 0, to: 1, total_deposit: 100_000, balance: 49_470, state: "opened"}
            - assert: {from: 1, to: 0, total_deposit: 0, balance: 50_530, state: "opened"}

            - assert: {from: 1, to: 2, total_deposit: 100_000, balance: 49_475, state: "opened"}
            - assert: {from: 2, to: 1, total_deposit: 0, balance: 50_025, state: "opened"}
      - serial:
          name: "Test that correct imbalance fee works in other direction"
          tasks:
            - wait_blocks: 2
            # Check that the PFS returns a path from 0 to 3
            - transfer: {from: 2, to: 0, amount: 50_000, expected_http_status: 200}

            # Check that the path is indeed the expected one
            - assert_pfs_history:
                source: 2
                request_count: 1
                target: 1
                expected_routes:
                  - [2, 1, 1]

            # Check that the imbalance fee works correctly in the other direction
            - assert: {from: 2, to: 1, total_deposit: 0, balance: 0, state: "opened"}
            - assert: {from: 1, to: 2, total_deposit: 100_000, balance: 100_000, state: "opened"}

            - assert: {from: 1, to: 0, total_deposit: 0, balance: 0, state: "opened"}
            - assert: {from: 0, to: 1, total_deposit: 100_000, balance: 100_000, state: "opened"}

